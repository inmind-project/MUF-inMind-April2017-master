/* -------------------------------------------------------------------------

   IconicGestureGenerator.java
     - A behavior generator for the BEAT gesture toolkit

   BEAT is Copyright(C) 2000-2001 by the MIT Media Laboratory.  
   All Rights Reserved.

   Developed by Hannes Vilhjalmsson, Timothy Bickmore, Yang Gao and Justine 
   Cassell at the Media Laboratory, MIT, Cambridge, Massachusetts, with 
   support from France Telecom, AT&T and the other generous sponsors of the 
   MIT Media Lab.

   For use by academic research labs, only with prior approval of Professor
   Justine Cassell, MIT Media Lab.

   This distribution is approved by Walter Bender, Director of the Media
   Laboratory, MIT.

   Permission to use, copy, or modify this software for educational and 
   research purposes only and without fee is hereby granted, provided  
   that this copyright notice and the original authors' names appear on all 
   copies and supporting documentation. If individual files are separated 
   from this distribution directory structure, this copyright notice must be 
   included. For any other uses of this software in original or modified form, 
   including but not limited to distribution in whole or in part, specific 
   prior permission must be obtained from MIT.  These programs shall not be 
   used, rewritten, or adapted as the basis of a commercial software or 
   hardware product without first obtaining appropriate licenses from MIT. 
   MIT makes no representation about the suitability of this software for 
   any purpose. It is provided "as is" without express or implied warranty.
   ------------------------------------------------------------------------*/
package beat.nvbgenerators;

import java.util.*;

import org.w3c.dom.*;

import beat.kb.KnowledgeBase;
import beat.utilities.XMLWrapper;

/** Generates iconic gestures for the appropriate Object, Action, and 
    Relative_Configuration nodes. The general rule is that iconic gestures
    are generated for Action and Object nodes that are contained within
    a Rheme and also contains a New element. For example, the &lt;ACTION&gt; tag in
    <pre>
    &lt;RHEME&gt;
    &nbsp;&nbsp;...
    &nbsp;&nbsp;&lt;ACTION ID="xyz"&gt;
    &nbsp;&nbsp;&nbsp;&nbsp;...
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;NEW&gt;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
    &nbsp;&nbsp;&nbsp;&nbsp;&lt;/NEW&gt;
    &nbsp;&nbsp;&lt;/ACTION&gt;
    &lt;/RHEME&gt;

    </pre>
    would generate an iconic gesture if its ID attribute value should return
    a suggestion from the knowledge base.

    Relative configuration nodes are simply looked up in the knowledge base 
    by the RSHIP attribute value and if it returns a gesture, that gesture 
    is inserted. So it would match on tags such as
    <pre>
    &lt;RELATIVE_CONFIGURATION RSHIP="abc"&gt;

    </pre>
    where "abc" would return some behavior tag when looked up in the 
    knowledge base.

    (Note: Iconics are conceptually different from deictic gestures, like
    those generated by DeicticGestureGenerator.)
    <h3>Change log:</h3>
    <table border="1">
    <tr><th>Date<th>Who<th>What</tr>
    <tr><td>6/29/01<td>Y. Gao<td>Created.</tr>
    </table>
*/

public class IconicGestureGenerator extends NVBGenerator {
    /** Does all the work of the generator. An XML transducer. Currently
	includes rules such as relative_configuration, location, and 
	impression. (Additional rules to generate iconic gestures should
	be placed here.)
    */
    public Document run(Document xml) {
	Vector nodes = XMLWrapper.getAllNodesOfType(xml,new String[]{"OBJECT","ACTION","RELATIVE_CONFIGURATION"});
	XMLWrapper xmlw = new XMLWrapper(xml);
	Element node,gesture;
	String id,value,type;
	KnowledgeBase.Instance object;
	for(int i=0;i<nodes.size();i++) {
	    node = (Element)nodes.elementAt(i);
	    type = node.getTagName();
	    id = node.getAttribute("ID");
	    
	    
	    //Yoichi 2015.7.7
	    //System.out.println("IconicGestureGenerator - node: " + node.toString());
	    //System.out.println("IconicGestureGenerator - type: " + type.toString());
	    //System.out.println("IconicGestureGenerator - id: " + id.toString());
	    
	    
	    //RELATIVE_CONFIGURATION rule (yang, 6/11)
	    if(type.equals("RELATIVE_CONFIGURATION")){
		String rshipValue = XMLWrapper.getXMLAttribute(node, "RSHIP");
		if(rshipValue != null){
		    gesture = module.getKnowledgeBase().getCompactGestureElement(xml, rshipValue);
		    if(gesture != null){
			gesture.setAttribute("PRIORITY", "20");
                         XMLWrapper.spliceParent(node, gesture);
		    }
		}
	    }

	    //LOCATION rule (yang, 6/11)
	    if(type.equals("OBJECT")&&(XMLWrapper.getAncestorOfType(node, "RHEME") != null)){
		String locationValue = XMLWrapper.getXMLAttribute(node, "LOCATION");
		if (locationValue != null){
		    gesture = module.getKnowledgeBase().getCompactGestureElement(xml, locationValue);
		    if(gesture != null){
			gesture.setAttribute("PRIORITY", "20");
			XMLWrapper.spliceParent(node, gesture);
		    }
		}
	    }
	    
	    //IMPRESSION rule (yang, 6/27)
	    //if((id!=null)&&(XMLWrapper.getAncestorOfType(node,"RHEME")!=null)&&(XMLWrapper.getFirstNodeOfType(node,"NEW")!=null)) {
	    if((id!=null)&&(XMLWrapper.getAncestorOfType(node,"RHEME")!=null)) { //(Yoichi 2015.7.7) 
		Node nearestRheme = xmlw.getAncestorOfType(node, "RHEME");
		if(nearestRheme != null){
		    gesture = module.getKnowledgeBase().getCompactGestureElement(xml, id);
		    if(gesture != null){
			gesture.setAttribute("PRIORITY", "20");
			XMLWrapper.spliceParent(nearestRheme, gesture);
		    }
		}
	    }
	    
	    // Only assign iconics for OBJECTS and ACTIONS within RHEMEs that contain NEW items
	    //if((id!=null)&&(XMLWrapper.getAncestorOfType(node,"RHEME")!=null)&&(XMLWrapper.getFirstNodeOfType(node,"NEW")!=null)) {
	    if((id!=null)&&(XMLWrapper.getAncestorOfType(node,"RHEME")!=null)) {  //(Yoichi 2015.7.7) 
		if(type.equals("OBJECT")) {
		    object = module.getKnowledgeBase().getInstance(id);
		    if(object!=null) {

			System.out.println("IconicGestureGenerator - Checking surprising value");

			// Assign iconic gesture for a surprising aspect of object
			value = object.getSurprisingValue();

			System.out.println("IconicGestureGenerator - Surprising value is "+value);

			if(value!=null) {
			    gesture = module.getKnowledgeBase().getCompactGestureElement(xml,value);
			    if(gesture!=null) {
				gesture.setAttribute("PRIORITY","20");
				XMLWrapper.spliceParent(node,gesture);
			    }
			}

			
		    }

		} else if(type.equals("ACTION")) {
		    
		    // Assign iconic gesture if gesture available for action
		    gesture = module.getKnowledgeBase().getCompactGestureElement(xml,id);
		    if(gesture!=null) {
			gesture.setAttribute("PRIORITY","20");
			XMLWrapper.spliceParent(node,gesture);
		    }    
		}
	    }
	}
	return xml;
    }
}


